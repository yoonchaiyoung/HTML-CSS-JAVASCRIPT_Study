// 동기 입출력 방식 vs 비동기 입출력 방식

// ex) 서버에 파일을 업로드
// 1. 프로그램에서 파일 선택
// 2. 파일 업로드 시작
// 3. 파일 업로드 완료 알림메시지 수신

// handler : 파일 처리를 위한 팡리 업로드 기능을 담당
// handler의 일 1. 파일 전송할 때까지 대기 -> 파일 업로드 처리 -> 업로드 완료/실패 알림 메시지 송신

// 1. 동기 입출력 방식
// 사용자가 파일 업로드 요청
// 서버는 파일 준비 후 처리, 사용자는 서버가 업로드 완료할 때까지 대기
// 서버는 업로드 완료 후 알림 메시지
// 대기하던 사용자는 서버로부터 처리 완료 메시지가 도착하면 다음 작업 진행

// 동기 입출력 방식
// -> 사용자는 서버가 파일을 모두 처리할 때까지 대기, 아무 일도 하지 X

// 2. 비동기 입출력 방식
// 사용자가 파일 업로드 요청
// 서버는 파일 중비 후 처리, 사용자는 **다른 작업 계속 수행**
// 서버는 업로드 완료 후 알림 메시지
// 대기하던 사용자는 파일 업로드 결과 받아 확인

// 비동기 입출력 방식
// -> 작업 끝나는 것 대기 필요 X, 원하는 작업 **이어서 진행**

// 1. 동기 입출력 방식
const big_task = () => {
  for (let i = 0; i < 1000; i++) {
    console.log(i);
  }
  alram();
};

const alram = () => {
  console.log("big_task done");
};

const doAdd = (a, b) => {
  return a + b;
};

big_task();
console.log(doAdd(10, 20));

// 간단한 덧셈 함수를 실행시키기 전에 1000번의 for문이 돌아가는 것을
// 대기하고 있다.
// 이전의 일이 다 끝나기 전까지 대기하는 것이 동기 입출력 방식.

// 2. 비동기 입출력 방식
// callback 함수를 이용
// setTimeout() : Web API의 한 종류.
// 코드를 바로 실행하지 않고 지정한 시간만큼 기다렸다가 로직을 실행.
setTimeout(() => {
  console.log("얘가 나중인가요~?");
}, 5000); // 5초 후에 실행
console.log("얘가 먼저인가용~?");

// setTimeout() 함수 때문에 시간을 기다렸다가 로직을 실행해야 해서
// 대기하지 않고 먼저 다른 코드가 실행된다.
// 이런 방식을 비동기 방식이라고 한다.
